// –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ - –ù–ï –º–µ–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
(function() {
    'use strict';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (window.innerWidth > 768) return;
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–æ–≤–µ—Ä—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫—Ä–æ–ª–ª–∞');
    
    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    function addAutoScrollToExisting(selector, speed = 1) {
        function trySetup() {
            const container = document.querySelector(selector);
            
            if (!container) return false;
            
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:', selector);
            console.log('üì¶ –®–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', container.scrollWidth, '–®–∏—Ä–∏–Ω–∞ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏:', container.clientWidth);
            
            // –ù–ï –º–µ–Ω—è–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É!
            // –ü—Ä–æ—Å—Ç–æ –¥—É–±–ª–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –±–µ—Å—à–æ–≤–Ω–æ—Å—Ç–∏
            const originalCards = Array.from(container.children);
            originalCards.forEach(card => {
                const copy = card.cloneNode(true);
                container.appendChild(copy);
            });
            
            console.log('üìã –ö–∞—Ä—Ç–æ—á–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –∫–∞—Ä—Ç–æ—á–µ–∫:', container.children.length);
            
            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            let isAutoScrolling = true;
            let userInteracting = false;
            let currentPosition = 0;
            let animationId = null;
            let pauseTimeout = null;
            
            // –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–π –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            function smoothAutoScroll() {
                if (!isAutoScrolling || userInteracting) {
                    animationId = requestAnimationFrame(smoothAutoScroll);
                    return;
                }
                
                currentPosition += speed;
                
                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (–ø–æ–ª–æ–≤–∏–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω)
                const maxScroll = (container.scrollWidth - container.clientWidth) / 2;
                
                // –°–±—Ä–æ—Å –¥–ª—è –±–µ—Å—à–æ–≤–Ω–æ—Å—Ç–∏
                if (currentPosition >= maxScroll) {
                    currentPosition = 0;
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                container.scrollLeft = currentPosition;
                
                animationId = requestAnimationFrame(smoothAutoScroll);
            }
            
            // –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            function startAutoScroll() {
                if (!isAutoScrolling) {
                    isAutoScrolling = true;
                    currentPosition = container.scrollLeft;
                    smoothAutoScroll();
                }
            }
            
            // –°—Ç–æ–ø –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            function stopAutoScroll() {
                isAutoScrolling = false;
                if (animationId) {
                    cancelAnimationFrame(animationId);
                    animationId = null;
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Å–∞–Ω–∏–π - –ü–†–û–°–¢–´–ï, –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            container.addEventListener('touchstart', () => {
                userInteracting = true;
                clearTimeout(pauseTimeout);
                // –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            });
            
            container.addEventListener('touchmove', () => {
                userInteracting = true;
                clearTimeout(pauseTimeout);
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –≤—Ä—É—á–Ω—É—é - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                currentPosition = container.scrollLeft;
            });
            
            container.addEventListener('touchend', () => {
                // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
                pauseTimeout = setTimeout(() => {
                    userInteracting = false;
                    currentPosition = container.scrollLeft;
                    // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                }, 1000);
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            container.addEventListener('scroll', () => {
                if (userInteracting) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                    currentPosition = container.scrollLeft;
                    clearTimeout(pauseTimeout);
                    
                    pauseTimeout = setTimeout(() => {
                        userInteracting = false;
                    }, 1000);
                }
            });
            
            // –ü–∞—É–∑–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
            document.addEventListener('visibilitychange', () => {
                if (document.hidden) {
                    stopAutoScroll();
                } else if (!userInteracting) {
                    startAutoScroll();
                }
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
            setTimeout(() => {
                startAutoScroll();
                console.log('üé¨ –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è:', selector);
            }, 1000);
            
            return true;
        }
        
        // –ü–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        let attempts = 0;
        function attemptSetup() {
            attempts++;
            if (trySetup() || attempts >= 5) return;
            setTimeout(attemptSetup, 1000);
        }
        
        setTimeout(attemptSetup, 2000);
    }
    
    // –ó–∞–ø—É—Å–∫ –¥–ª—è –æ–±–µ–∏—Ö —Å–µ–∫—Ü–∏–π
    addAutoScrollToExisting('#ecosystem .ecosystem-grid', 1.5); // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
    addAutoScrollToExisting('#partnerships .partnerships-grid', 1.0); // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è 2 –∫–∞—Ä—Ç–æ—á–µ–∫
    
})();