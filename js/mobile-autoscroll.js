// –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
(function() {
    'use strict';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (window.innerWidth > 768) return;
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes mobileAutoScroll {
            0% { transform: translateX(0); }
            100% { transform: translateX(-50%); }
        }
        
        .mobile-autoscroll-wrapper {
            width: 100% !important;
            overflow-x: auto !important;
            overflow-y: hidden !important;
            position: relative !important;
            scroll-behavior: smooth !important;
            -webkit-overflow-scrolling: touch !important;
        }
        
        .mobile-autoscroll-track {
            display: flex !important;
            gap: 20px !important;
            backface-visibility: hidden !important;
            will-change: transform !important;
        }
        
        .mobile-autoscroll-track.auto-mode {
            overflow-x: visible !important;
        }
        
        .mobile-autoscroll-track.manual-mode {
            animation-play-state: paused !important;
            transform: none !important;
            animation: none !important;
        }
    `;
    document.head.appendChild(style);
    
    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    function setupAdvancedAutoScroll(selector, duration) {
        function trySetup() {
            const container = document.querySelector(selector);
            
            if (!container) {
                console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', selector);
                return false;
            }
            
            const cards = Array.from(container.children);
            
            if (cards.length === 0) {
                console.log('‚ùå –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤:', selector);
                return false;
            }
            
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', selector, '–∫–∞—Ä—Ç–æ—á–µ–∫:', cards.length);
            
            // –°–æ–∑–¥–∞–µ–º wrapper —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            const wrapper = document.createElement('div');
            wrapper.className = 'mobile-autoscroll-wrapper';
            
            const track = document.createElement('div');
            track.className = 'mobile-autoscroll-track auto-mode';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards.forEach(card => track.appendChild(card));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ø–∏–∏ –¥–ª—è –±–µ—Å—à–æ–≤–Ω–æ–π –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            cards.forEach(card => {
                const copy = card.cloneNode(true);
                track.appendChild(copy);
            });
            
            // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            wrapper.appendChild(track);
            container.innerHTML = '';
            container.appendChild(wrapper);
            
            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏
            let isAutoMode = true;
            let autoScrollTimer;
            let manualScrollTimer;
            let isUserScrolling = false;
            
            // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            function startAutoScroll() {
                if (!isAutoMode) return;
                
                track.style.transform = 'translateX(0)';
                track.style.animation = 'none';
                track.offsetHeight; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
                
                setTimeout(() => {
                    if (isAutoMode) {
                        track.style.animation = `mobileAutoScroll ${duration}s linear infinite`;
                        console.log('üé¨ –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞:', selector);
                    }
                }, 50);
            }
            
            // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º
            function switchToManualMode() {
                isAutoMode = false;
                track.classList.remove('auto-mode');
                track.classList.add('manual-mode');
                wrapper.style.overflowX = 'auto';
                track.style.animation = 'none';
                track.style.transform = 'translateX(0)';
                console.log('üëÜ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º:', selector);
            }
            
            // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
            function switchToAutoMode() {
                isAutoMode = true;
                track.classList.remove('manual-mode');
                track.classList.add('auto-mode');
                wrapper.style.overflowX = 'hidden';
                startAutoScroll();
                console.log('ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ —Ä–µ–∂–∏–º:', selector);
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            wrapper.addEventListener('touchstart', function(e) {
                isUserScrolling = true;
                clearTimeout(autoScrollTimer);
                clearTimeout(manualScrollTimer);
                
                if (isAutoMode) {
                    switchToManualMode();
                }
            });
            
            wrapper.addEventListener('touchmove', function(e) {
                isUserScrolling = true;
                clearTimeout(autoScrollTimer);
                clearTimeout(manualScrollTimer);
            });
            
            wrapper.addEventListener('touchend', function() {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
                manualScrollTimer = setTimeout(() => {
                    isUserScrolling = false;
                    switchToAutoMode();
                }, 4000);
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            wrapper.addEventListener('scroll', function() {
                if (isUserScrolling) {
                    clearTimeout(autoScrollTimer);
                    clearTimeout(manualScrollTimer);
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                    manualScrollTimer = setTimeout(() => {
                        isUserScrolling = false;
                        switchToAutoMode();
                    }, 3000);
                }
            });
            
            // –ü–∞—É–∑–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
            document.addEventListener('visibilitychange', () => {
                if (document.hidden) {
                    track.style.animationPlayState = 'paused';
                } else if (isAutoMode && !isUserScrolling) {
                    track.style.animationPlayState = 'running';
                }
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
            setTimeout(startAutoScroll, 500);
            
            return true;
        }
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let attempts = 0;
        const maxAttempts = 5;
        
        function attemptSetup() {
            attempts++;
            
            if (trySetup()) {
                return;
            }
            
            if (attempts < maxAttempts) {
                setTimeout(attemptSetup, 1000);
            }
        }
        
        setTimeout(attemptSetup, 2000);
    }
    
    // –ó–∞–ø—É—Å–∫ –¥–ª—è –æ–±–µ–∏—Ö —Å–µ–∫—Ü–∏–π —Å –±—ã—Å—Ç—Ä–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é (–∫–∞–∫ –≤ COLLECTION)
    setupAdvancedAutoScroll('#ecosystem .ecosystem-grid', 12); // –ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è 7 –∫–∞—Ä—Ç–æ—á–µ–∫
    setupAdvancedAutoScroll('#partnerships .partnerships-grid', 8); // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –¥–ª—è 2 –∫–∞—Ä—Ç–æ—á–µ–∫
    
})();